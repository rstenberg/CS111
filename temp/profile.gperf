Total: 47 samples
      43  91.5%  91.5%       47 100.0% thread_function
       2   4.3%  95.7%        2   4.3% __strcmp_sse42
       1   2.1%  97.9%        3   6.4% SortedList_insert
       1   2.1% 100.0%        1   2.1% SortedList_lookup
       0   0.0% 100.0%       47 100.0% __clone
       0   0.0% 100.0%        4   8.5% performListOperations
       0   0.0% 100.0%       47 100.0% start_thread
ROUTINE ====================== thread_function in /u/ee/ugrad/stenberg/Desktop/CS111/lab2B/lab2_list.c
    43     47 Total samples (flat / cumulative)
     .      .  112: //		- Insert random SortedListElement
     .      .  113: //	Get length of list
     .      .  114: //	For each iteration:
     .      .  115: //		- Lookup and delete each key it previously inserted
     .      .  116: //	Exit to re-join parent thread
---
     .      .  117: void *thread_function(void *id)	{
     .      .  118: 	int my_id = *((int*)id);
     .      .  119: 
     .      .  120: 	if (mutex_lock_flag)	{
     .      .  121: 		// Get wait time starting point
     .      .  122: 		struct timespec start;
     .      .  123: 		clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  124: 		attempts_to_acquire_mutex += 1;
     .      .  125: 
     .      .  126: 		pthread_mutex_lock(&mutex_locks[hashes[my_id]]);
     .      .  127: 		
     .      .  128: 		// Get wait time ending point
     .      .  129: 		struct timespec end;
     .      .  130:         clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  131:         long long thread_wait_time = getNSec(start, end);
     .      .  132: 		 mutex_time_spent_waiting += thread_wait_time;
     .      .  133: 
     .      .  134: 		performListOperations(my_id);
     .      .  135: 		pthread_mutex_unlock(&mutex_locks[hashes[my_id]]);
     .      .  136: 		
     .      .  137: 	}	else if (spin_lock_flag)	{
     .      .  138: 
    43     43  139: 		while(__sync_lock_test_and_set(&spin_locks[hashes[my_id]], 1));
     .      4  140: 		performListOperations(my_id);
     .      .  141: 		__sync_lock_release(&spin_locks[hashes[my_id]]);
     .      .  142: 
     .      .  143: 	}	else 	{
     .      .  144: 		
     .      .  145: 		// No lock set
     .      .  146: 		performListOperations(my_id);
     .      .  147: 	}
     .      .  148: 
     .      .  149: 	return NULL;
     .      .  150: }
---
     .      .  151: 
     .      .  152: int main(int argc, char *argv[])	{
     .      .  153: 
     .      .  154: 	// Set default program name
     .      .  155: 	char* test_name = (char*)malloc(6 * sizeof(char));
ROUTINE ====================== thread_function in /u/ee/ugrad/stenberg/Desktop/CS111/lab2B/lab2_list.c
    43     47 Total samples (flat / cumulative)
     .      .  112: //		- Insert random SortedListElement
     .      .  113: //	Get length of list
     .      .  114: //	For each iteration:
     .      .  115: //		- Lookup and delete each key it previously inserted
     .      .  116: //	Exit to re-join parent thread
---
     .      .  117: void *thread_function(void *id)	{
     .      .  118: 	int my_id = *((int*)id);
     .      .  119: 
     .      .  120: 	if (mutex_lock_flag)	{
     .      .  121: 		// Get wait time starting point
     .      .  122: 		struct timespec start;
     .      .  123: 		clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  124: 		attempts_to_acquire_mutex += 1;
     .      .  125: 
     .      .  126: 		pthread_mutex_lock(&mutex_locks[hashes[my_id]]);
     .      .  127: 		
     .      .  128: 		// Get wait time ending point
     .      .  129: 		struct timespec end;
     .      .  130:         clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  131:         long long thread_wait_time = getNSec(start, end);
     .      .  132: 		 mutex_time_spent_waiting += thread_wait_time;
     .      .  133: 
     .      .  134: 		performListOperations(my_id);
     .      .  135: 		pthread_mutex_unlock(&mutex_locks[hashes[my_id]]);
     .      .  136: 		
     .      .  137: 	}	else if (spin_lock_flag)	{
     .      .  138: 
    43     43  139: 		while(__sync_lock_test_and_set(&spin_locks[hashes[my_id]], 1));
     .      4  140: 		performListOperations(my_id);
     .      .  141: 		__sync_lock_release(&spin_locks[hashes[my_id]]);
     .      .  142: 
     .      .  143: 	}	else 	{
     .      .  144: 		
     .      .  145: 		// No lock set
     .      .  146: 		performListOperations(my_id);
     .      .  147: 	}
     .      .  148: 
     .      .  149: 	return NULL;
     .      .  150: }
---
     .      .  151: 
     .      .  152: int main(int argc, char *argv[])	{
     .      .  153: 
     .      .  154: 	// Set default program name
     .      .  155: 	char* test_name = (char*)malloc(6 * sizeof(char));
